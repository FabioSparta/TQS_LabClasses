// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class TQSP3SeleniumRecordTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void tQSP3SeleniumRecord() {
    // Test name: TQS_P3_SeleniumRecord
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("https://blazedemo.com/");
    // 2 | setWindowSize | 672x690 | 
    driver.manage().window().setSize(new Dimension(672, 690));
    // 3 | click | name=fromPort | 
    driver.findElement(By.name("fromPort")).click();
    // 4 | select | name=fromPort | label=Portland
    {
      WebElement dropdown = driver.findElement(By.name("fromPort"));
      dropdown.findElement(By.xpath("//option[. = 'Portland']")).click();
    }
    // 5 | click | name=fromPort | 
    driver.findElement(By.name("fromPort")).click();
    // 6 | click | name=toPort | 
    driver.findElement(By.name("toPort")).click();
    // 7 | select | name=toPort | label=Dublin
    {
      WebElement dropdown = driver.findElement(By.name("toPort"));
      dropdown.findElement(By.xpath("//option[. = 'Dublin']")).click();
    }
    // 8 | click | name=toPort | 
    driver.findElement(By.name("toPort")).click();
    // 9 | click | css=.btn-primary | 
    driver.findElement(By.cssSelector(".btn-primary")).click();
    // 10 | click | css=h3 | 
    driver.findElement(By.cssSelector("h3")).click();
    // 11 | assertText | css=h3 | Flights from Portland to Dublin:
    assertThat(driver.findElement(By.cssSelector("h3")).getText(), is("Flights from Portland to Dublin:"));
    // 12 | click | css=tr:nth-child(1) .btn | 
    driver.findElement(By.cssSelector("tr:nth-child(1) .btn")).click();
    // 13 | click | css=.control-group:nth-child(2) > .controls | 
    driver.findElement(By.cssSelector(".control-group:nth-child(2) > .controls")).click();
    // 14 | click | id=inputName | 
    driver.findElement(By.id("inputName")).click();
    // 15 | type | id=inputName | Fabio
    driver.findElement(By.id("inputName")).sendKeys("Fabio");
    // 16 | type | id=address | feafae
    driver.findElement(By.id("address")).sendKeys("feafae");
    // 17 | type | id=city | Washington
    driver.findElement(By.id("city")).sendKeys("Washington");
    // 18 | type | id=state | sdasa
    driver.findElement(By.id("state")).sendKeys("sdasa");
    // 19 | type | id=zipCode | 231231
    driver.findElement(By.id("zipCode")).sendKeys("231231");
    // 20 | click | css=.btn-primary | 
    driver.findElement(By.cssSelector(".btn-primary")).click();
    // 21 | click | css=h1 | 
    driver.findElement(By.cssSelector("h1")).click();
    // 22 | assertText | css=h1 | Thank you for your purchase today!
    assertThat(driver.findElement(By.cssSelector("h1")).getText(), is("Thank you for your purchase today!"));
  }
}
